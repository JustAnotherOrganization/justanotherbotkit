// Code generated by MockGen. DO NOT EDIT.
// Source: justanother.org/justanotherbotkit/users/repo (interfaces: Repo)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repo "justanother.org/justanotherbotkit/users/repo"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepo) CreateUser(arg0 context.Context, arg1 repo.User) (repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepoMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepo)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockRepo) DeleteUser(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepoMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepo)(nil).DeleteUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockRepo) GetUser(arg0 context.Context, arg1 uint) (repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepoMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepo)(nil).GetUser), arg0, arg1)
}

// GetUserByNetworkID mocks base method.
func (m *MockRepo) GetUserByNetworkID(arg0 context.Context, arg1 string) (repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByNetworkID", arg0, arg1)
	ret0, _ := ret[0].(repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByNetworkID indicates an expected call of GetUserByNetworkID.
func (mr *MockRepoMockRecorder) GetUserByNetworkID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByNetworkID", reflect.TypeOf((*MockRepo)(nil).GetUserByNetworkID), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockRepo) ListUsers(arg0 context.Context, arg1, arg2 uint, arg3 repo.PageOrder) ([]repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockRepoMockRecorder) ListUsers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockRepo)(nil).ListUsers), arg0, arg1, arg2, arg3)
}

// UpdateUser mocks base method.
func (m *MockRepo) UpdateUser(arg0 context.Context, arg1 repo.User) (repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepoMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepo)(nil).UpdateUser), arg0, arg1)
}
